Approach : DFS
Time complexity : O(n*m)
space complexity : O(n*m)


class Solution {    
    int m;
    int n;
    public void dfs(int i, int j, char[][] grid){
        if(i < 0 || i >= n || j < 0 || j >= m || grid[i][j] != '1'){
            return;
        }
        if(grid[i][j] == '$'){
            return;
        }

        grid[i][j] = '$';

        dfs(i+1,j,grid);
        dfs(i-1,j,grid);
        dfs(i,j+1,grid);
        dfs(i,j-1,grid);
    }
    public int numIslands(char[][] grid) {
        n = grid.length;
        m = grid[0].length;
        int isIsland = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == '1'){
                    dfs(i,j,grid);
                    isIsland++;
                }
            }
        }
        return isIsland;
    }
}

******************************************************************************************************************
Approach : BFS
Time complexity : O(n*m)
space complexity : O(n*m)


class Solution {    
    public void bfs(int i, int j, char[][] grid){
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();

        int n = grid.length;
        int m = grid[0].length;
        int[][] direction = {{1,0} , {-1,0} , {0,1}, {0,-1}};
        q.add(new Pair<>(i,j));
        grid[i][j] = '$';

        while(!q.isEmpty()){
            Pair<Integer, Integer> pair = q.poll();

            for(int[] dir : direction){
                int i_ = pair.getKey() + dir[0];
                int j_ = pair.getValue() + dir[1];

                if(i_ < 0 || i_ >= n || j_<0 || j_>= m || grid[i_][j_] != '1'){
                    continue;
                }else if(grid[i_][j_] == '$'){
                    continue;
                }else{
                    q.add(new Pair<>(i_, j_));
                    grid[i_][j_] = '$';
                }
            }
        }
    } 
    
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int isIsland = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == '1'){
                    bfs(i,j,grid);
                    isIsland++;
                }
            }
        }
        return isIsland;
    }
}
