Approach : DFS
Time complexity : O(n*m)
space complexity : O(n*m)


class Solution {    
    int m;
    int n;
    public void dfs(int i, int j, char[][] grid){
        if(i < 0 || i >= n || j < 0 || j >= m || grid[i][j] != '1'){
            return;
        }
        if(grid[i][j] == '$'){
            return;
        }

        grid[i][j] = '$';

        dfs(i+1,j,grid);
        dfs(i-1,j,grid);
        dfs(i,j+1,grid);
        dfs(i,j-1,grid);
    }
    public int numIslands(char[][] grid) {
        n = grid.length;
        m = grid[0].length;
        int isIsland = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == '1'){
                    dfs(i,j,grid);
                    isIsland++;
                }
            }
        }
        return isIsland;
    }
}
