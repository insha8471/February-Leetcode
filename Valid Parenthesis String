Approach : Recursion + Memoization

Time complexity : O(n*n)
Space complexity : O(1)


class Solution {
    public boolean solve(int idx , int open, String s, int[][] t){
        if(idx == s.length()){
            return open==0;
        }

        if(t[idx][open] != -1){
            return t[idx][open] == 1;
        }
        boolean isValid = false;
        if(s.charAt(idx) == '*'){
            isValid |= solve(idx+1, open+1, s,t); //'('
            isValid |= solve(idx+1, open, s,t); //""
            if(open > 0){
                isValid |= solve(idx+1, open-1,s,t); //')'
            }
        }else{
            if(s.charAt(idx) == '('){
                isValid |= solve(idx+1, open+1,s,t);
            }else if(open > 0){
                isValid |= solve(idx+1, open-1, s,t);
            }
        }

        t[idx][open] = isValid ? 1 : 0;
        return isValid;
    }
    public boolean checkValidString(String s) {
        int n = s.length();
        int[][] t = new int[n][n];
        for(int[] x : t){
            Arrays.fill(x, -1);
        }
        return solve(0,0,s,t);
    }
}


************************************************************************************************************************************
Approach : stack
Time complexity : O(n)
Space complexity : O(n);


class Solution {
    public boolean checkValidString(String s) {
        Stack<Integer> st = new Stack<>();
        Stack<Integer> star = new Stack<>();

        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);

            if(ch == '('){
                st.push(i);
            }else if(ch == '*'){
                star.push(i);
            }else{
                if(st.size() != 0){
                    st.pop();
                }else if(star.size() != 0){
                    star.pop();
                }else{
                    return false;
                }
            }
        }

        while(!st.isEmpty() && !star.isEmpty()){
            if(st.peek() > star.peek()){
                return false;
            }
            st.pop();
            star.pop();
        }

        return st.isEmpty();
    }
}
